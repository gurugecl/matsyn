"""
Multi-Agent Synthesis Recommendation Web App
"""

import os
import re
import traceback
import datetime
from typing import Tuple, Generator
import gradio as gr
from multi_agent_synthesizer import MultiAgentSynthesizer
from materials_agent import MaterialsSynthesisAgent
from dotenv import load_dotenv

load_dotenv()

NEO4J_URI = os.getenv("NEO4J_URI", "bolt://localhost:7687")
NEO4J_USER = os.getenv("NEO4J_USER", "neo4j")
NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD", "ai4science")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
FUTUREHOUSE_API_KEY = os.getenv("FUTUREHOUSE_API_KEY")

# Initialize
neo4j_agent = MaterialsSynthesisAgent(NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD)

if OPENAI_API_KEY:
    synthesizer = MultiAgentSynthesizer(
        neo4j_agent, 
        api_key=OPENAI_API_KEY,
        futurehouse_api_key=FUTUREHOUSE_API_KEY
    )
    agent_ready = True
else:
    synthesizer = None
    agent_ready = False


def recommend_synthesis(formula: str, show_workflow: bool = True):
    """Generate multi-agent synthesis recommendation with streaming updates"""
    
    if not agent_ready:
        error_msg = """## OpenAI API Key Required

```bash
export OPENAI_API_KEY='your-key-here'
```

Then restart the app."""
        yield error_msg, "", "", "", None
        return
    
    try:
        if not formula.strip():
            yield "Please enter a material formula", "", "", "", None
            return
        
        # Status: Starting
        status = "**Processing...**\n\n"
        status += "- Analyzing material structure\n\n"
        status += "- Querying database\n\n"
        status += "- Generating recommendations\n"
        yield "", "", "", status, None
        
        # Run the complete synthesis (this does all 3 agents)
        result = synthesizer.synthesize(formula.strip())
        
        # Format outputs
        analysis_text = f"""## Step 1: Material Analysis

**Structure Type:** {result['analysis']['structure_type']}

**Element Types:** {result['analysis']['element_types']}

**Similar Materials Identified:**
"""
        for priority, materials in sorted(result['analysis']['priorities'].items()):
            analysis_text += f"\n**Priority {priority}:** {', '.join(materials[:5])}"
        
        # Database query results
        query_text = "## Step 2: Database Query Results\n\n"
        total_procedures = 0
        for priority in sorted(result['database_results'].keys()):
            procedures = result['database_results'][priority]
            total_procedures += len(procedures)
            if priority == 0:
                query_text += f"**Exact Match:** Found {len(procedures)} procedures\n\n"
            else:
                query_text += f"**Priority {priority}:** Found {len(procedures)} procedures\n\n"
        
        # Final recommendations
        report = synthesizer.format_report(result, formula.strip())
        
        # Create downloadable file
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_formula = formula.strip().replace(' ', '_').replace('/', '_').replace('\\', '_')
        filename = f"/tmp/synthesis_recommendation_{safe_formula}_{timestamp}.txt"
        
        # Convert markdown to plain text
        def markdown_to_text(md_text):
            """Simple markdown to plain text conversion"""
            # Remove markdown headers
            text = re.sub(r'^#+\s+', '', md_text, flags=re.MULTILINE)
            # Remove bold/italic
            text = re.sub(r'\*\*(.+?)\*\*', r'\1', text)
            text = re.sub(r'\*(.+?)\*', r'\1', text)
            # Remove code blocks
            text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)
            text = re.sub(r'`(.+?)`', r'\1', text)
            return text
        
        full_report = f"""================================================================================
MATERIALS SYNTHESIS RECOMMENDATION REPORT
================================================================================
Target Material: {formula.strip()}
Generated: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
================================================================================

{markdown_to_text(analysis_text)}

================================================================================

{markdown_to_text(query_text)}

================================================================================

{markdown_to_text(report)}

================================================================================
REPORT METADATA
================================================================================
Report generated by Materials Synthesis AI System (MatSyn)
- Agent 1: GPT-4o-mini (Material Analysis)
- Agent 2: Neo4j Knowledge Graph (35,675 procedures)
- Agent 3: GPT-4o-mini (Synthesis Planning)
================================================================================
"""
        
        with open(filename, 'w') as f:
            f.write(full_report)
        
        # Final status
        status = "**Complete!**\n\n"
        status += f"**Structure Identified:** {result['analysis']['structure_type']}\n\n"
        status += f"**Database Results:** {total_procedures} procedures found\n\n"
        status += f"**Recommendations:** Generated with stoichiometry and conditions\n\n"
        status += "Download the complete report below"
        
        if show_workflow:
            yield analysis_text, query_text, report, status, filename
        else:
            yield "", "", report, status, filename
        
    except Exception as e:
        error = f"Error: {str(e)}\n\n{traceback.format_exc()}"
        yield error, "", "", f"Error occurred: {str(e)}", None


# Create Gradio interface with custom CSS
custom_css = """
.gradio-container {
    max-width: 1400px !important;
}
.main-header {
    text-align: center;
    padding: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 10px;
    color: white;
    margin-bottom: 30px;
}
.input-section {
    background: #f8f9fa;
    padding: 25px;
    border-radius: 10px;
    border: 2px solid #e0e0e0;
}
.status-section {
    background: #e8f4f8;
    padding: 20px;
    border-radius: 10px;
    border-left: 4px solid #2196F3;
    margin-bottom: 20px;
    min-height: 120px;
}
.download-btn-hidden {
    margin-bottom: 20px;
}
.download-btn-hidden[style*="display: block"] {
    background: #f0f7ff;
    padding: 15px;
    border-radius: 10px;
    border: 2px dashed #1976D2;
}
.download-btn-hidden button {
    min-height: 50px !important;
    font-size: 15px !important;
    font-weight: 600 !important;
}
.section-divider {
    margin: 30px 0;
    border-top: 2px solid #e0e0e0;
}
"""

with gr.Blocks(title="Materials Synthesis AI System (MatSyn)", theme=gr.themes.Soft(), css=custom_css) as demo:
    
    # Header
    with gr.Row(elem_classes="main-header"):
        gr.Markdown(f"""
        # üß™ Materials Synthesis AI System (MatSyn)
        **Multi-Agent Workflow** | LLM Agents + Neo4j Database
        
        {"System Ready" if agent_ready else "Configuration Required"}
        """)
    
    with gr.Row():
        # Left Column - Input Section
        with gr.Column(scale=1):
            with gr.Group(elem_classes="input-section"):
                gr.Markdown("### üìù Enter Target Material")
                
                formula_input = gr.Textbox(
                    label="Material Formula",
                    placeholder="e.g., LiMnO‚ÇÇ, CeO‚ÇÇ, Ba‚ÇÄ.‚ÇÖSr‚ÇÄ.‚ÇÖTiO‚ÇÉ",
                    value="",
                    lines=1,
                    scale=2
                )
                
                show_workflow = gr.Checkbox(
                    label="Show detailed analysis steps",
                    value=True
                )
                
                synthesize_btn = gr.Button(
                    "üöÄ GENERATE RECOMMENDATION",
                    variant="primary",
                    size="lg",
                    scale=2
                )
            
            gr.Markdown('<div class="section-divider"></div>')
            
            gr.Markdown("### üí° Example Materials")
            gr.Markdown("""
            **Spinels:** `LiMn‚ÇÇO‚ÇÑ`, `LiNi‚ÇÄ.‚ÇÖMn‚ÇÅ.‚ÇÖO‚ÇÑ`
            
            **Perovskites:** `LaMnO‚ÇÉ`, `CeMnO‚ÇÉ`, `BaTiO‚ÇÉ`
            
            **Simple Oxides:** `TiO‚ÇÇ`, `CeO‚ÇÇ`, `Fe‚ÇÇO‚ÇÉ`
            """)
            
            gr.Markdown('<div class="section-divider"></div>')
            
            gr.Markdown("### How It Works")
            gr.Markdown("""
            **Agent 1:** Analyzes material structure and identifies similar compounds using GPT-4o-mini
            
            **Agent 2:** Queries Neo4j knowledge graph for exact matches and similar materials (35,675 procedures)
            
            **Agent 3:** Generates prioritized synthesis recommendations with stoichiometry and conditions
            
            **Output:** Complete report with DOI citations from actual literature
            """)
        
        # Right Column - Results Section
        with gr.Column(scale=2):
            # Status Section
            with gr.Group(elem_classes="status-section"):
                gr.Markdown("### ü§ñ Agent Status")
                status_box = gr.Markdown(
                    value="üí§ **Waiting for input**\n\nEnter a material formula and click GENERATE RECOMMENDATION to begin.",
                )
            
            # Download Section - hidden until file is ready
            download_btn = gr.File(
                label="üì• Download Complete Report",
                visible=False,
                interactive=False,
                show_label=True,
                file_count="single",
                elem_classes="download-btn-hidden"
            )
            
            gr.Markdown('<div class="section-divider"></div>')
            
            # Results Tabs
            gr.Markdown("### üìä Results")
            with gr.Tabs():
                with gr.Tab("üéØ Recommendations"):
                    final_output = gr.Markdown()
                
                with gr.Tab("üî¨ Material Analysis"):
                    analysis_output = gr.Markdown()
                
                with gr.Tab("üíæ Database Query"):
                    query_output = gr.Markdown()
    
    # Event handler
    synthesize_btn.click(
        fn=recommend_synthesis,
        inputs=[formula_input, show_workflow],
        outputs=[analysis_output, query_output, final_output, status_box, download_btn]
    )

if __name__ == "__main__":
    print("\n" + "="*70)
    print("Materials Synthesis AI System (MatSyn)")
    print("="*70)
    print(f"Neo4j: {NEO4J_URI}")
    print(f"OpenAI: {'Connected (gpt-4o-mini)' if agent_ready else 'Not configured'}")
    print(f"Access at: http://localhost:7860")
    print("="*70 + "\n")
    
    if not agent_ready:
        print("WARNING: OPENAI_API_KEY not set!")
        print("    Set it with: export OPENAI_API_KEY='your-key'\n")
    
    demo.launch(share=False, server_name="0.0.0.0", server_port=7860, allowed_paths=["/tmp"])

